name: unit-tests

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  test-cpython:
    name: unit-tests (${{ matrix.os }}, Python-CPython ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          #########
          # Linux #
          #########
          - os: ubuntu-latest
            python_version: '3.8'
          - os: ubuntu-latest
            python_version: '3.9'
          - os: ubuntu-latest
            python_version: '3.10'
          #########
          # macOS #
          #########
          - os: macOS-latest
            python_version: '3.8'
          - os: macOS-latest
            python_version: '3.10'
          ###########
          # Windows #
          ###########
          - os: windows-latest
            python_version: '3.8'
          - os: windows-latest
            python_version: '3.10'
    steps:
      - name: Prevent conversion of line endings on Windows
        if: startsWith(matrix.os, 'windows')
        shell: pwsh
        run: git config --global core.autocrlf false
      - name: check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: pydistscheck-tests
          miniforge-variant: Mambaforge
          use-mamba: true
          python-version: ${{ matrix.python_version }}
      - name: Install extra tools on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            llvm
      - name: Install extra tools on Windows
        if: startsWith(matrix.os, 'windows')
        run: |
          choco install zip
      - name: build and check dists
        shell: bash -l {0}
        run: |
          pip install -r ./requirements-tests.txt
          make build check-dists
      - name: install
        shell: bash -l {0}
        run: |
          pip install dist/*.whl
      - name: test
        shell: bash -l {0}
        run: |
          make test
  test-pypy:
    name: unit-tests (${{ matrix.os }}, Python-PyPy ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python_version: '3.9'
    steps:
      - name: check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v4
        with:
          python-version: 'pypy${{ matrix.python_version}}'
      - name: Install extra tools on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            llvm
      - name: build and check dists
        shell: bash -l {0}
        run: |
          pip install -r ./requirements-tests.txt
          make build check-dists
      - name: install
        shell: bash -l {0}
        run: |
          pip install dist/*.whl
      - name: test
        shell: bash -l {0}
        run: |
          make test
  check-test-packages:
    name: check-test-packages (${{ matrix.os }}, Python ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python_version: '3.11'
          - os: macOS-latest
            python_version: '3.10'
    steps:
      - name: check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python_version}}"
      - name: run tests
        run: |
          bin/check-test-packages.sh ${GITHUB_WORKSPACE}/tests/data
  all-unit-tests-successful:
    if: always()
    runs-on: ubuntu-latest
    needs:
    - test-cpython
    - test-pypy
    - check-test-packages
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@v1.2.2
      with:
        jobs: ${{ toJSON(needs) }}
